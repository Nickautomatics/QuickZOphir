//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.DC;
using DevExpress.ExpressApp.ReportsV2;
using DevExpress.ExpressApp.Utils;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;
using DevExpress.XtraReports.UI;
using QuickZ.Core.Contracts.Templates;
using QuickZ.Persistent.Xpo.BusinessObjects.Templates;
using System;
using System.ComponentModel;

namespace QuickZ.Persistent.Xpo.BusinessObjects.Templates
{
    [DevExpress.ExpressApp.DC.DomainComponent]
    [NavigationItem(false), CreatableItem(true)]
    [XafDefaultProperty("DocumentName")]
    //[ImageName("BO_List")]
    [ImageName("BOBusinessDocumentReport")]
    [DevExpress.ExpressApp.DC.XafDisplayName("Business Report")]
    [MapInheritance(MapInheritanceType.ParentTable)]
    public partial class QuickZTemplateReportBase : QuickZTemplateDocumentBase, IReportDataV2Writable, IInplaceReportV2, ITemplateReport, IDocumentTemplate
    {
        // Fields...
        private string _Category;
        [VisibleInDetailView(false)]
        public string Category
        {
            get
            {
                return _Category;
            }
            set
            {
                SetPropertyValue("Category", ref _Category, value);
            }
        }

        TemplateType IDocumentTemplate.TemplateType
        {
            get
            {
                return TemplateType.DataReport;
            }
        }

        private string displayName = "";
        private bool isInplaceReport = false;
#if MediumTrust
		private string dataTypeName = string.Empty;
#else
        [Persistent("ObjectTypeName"), Size(512)]
        private string dataTypeName = string.Empty;
#endif
        private string parametersObjectTypeName = string.Empty;

        private Type predefinedReportType;

        protected override void OnSaving()
        {
            if (String.IsNullOrEmpty(displayName) || (displayName.Trim() == ""))
            {
                throw new UserFriendlyException(ReportsModuleV2.GetEmptyDisplayNameErrorMessage());
            }

            Name = DisplayName;

            base.OnSaving();
        }

        protected override void OnChanged(string propertyName, object oldValue, object newValue)
        {
            switch (propertyName)
            {
                case nameof(Content): 
                    // --- Need this to implement XAF's internal reporting routines
                    if (((IReportDataV2)this).IsPredefined)
                    {
                        throw new NotImplementedException();
                    }
                    break;
            }

            base.OnChanged(propertyName, oldValue, newValue);
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public QuickZTemplateReportBase(Session session, Type dataType)
            : base(session)
        {
            Guard.ArgumentNotNull(dataType, "dataType");
            this.dataTypeName = dataType.FullName;
        }
        [Persistent("DisplayName")]
        public string DisplayName
        {
            get { return displayName; }
            set { SetPropertyValue("DisplayName", ref displayName, value); }
        }

#if MediumTrust
		[Browsable(false)]
		[Persistent("ObjectTypeName")]
		public string DataTypeName {
			get { return dataTypeName; }
			set { SetPropertyValue("ObjectTypeName", ref dataTypeName, value); }
		}
#else
        [Browsable(false)]
        [PersistentAlias("dataTypeName")]
        public string DataTypeName
        {
            get { return dataTypeName; }
        }
#endif
        [SettingsBindable(true)]
        [VisibleInListView(false)]
        [TypeConverter(typeof(ReportParametersObjectTypeConverter))]
        [Localizable(true)]
        public Type ParametersObjectType
        {
            get
            {
                if (!string.IsNullOrEmpty(ParametersObjectTypeName))
                {
                    ITypeInfo typeInfo = XafTypesInfo.Instance.FindTypeInfo(ParametersObjectTypeName);
                    if (typeInfo != null)
                    {
                        return typeInfo.Type;
                    }
                }
                return null;
            }
            set
            {
                ((IReportDataV2Writable)this).SetParametersObjectType(value);
            }
        }
        [Size(512)]
        [Browsable(false)]
        public string ParametersObjectTypeName
        {
            get { return parametersObjectTypeName; }
            set { SetPropertyValue(ReportsModuleV2.ParametersObjectTypeNameMemberName, ref parametersObjectTypeName, value); }
        }
        [NonPersistent, System.ComponentModel.DisplayName("Data Type")]
        public string DataTypeCaption
        {
            get { return CaptionHelper.GetClassCaption(dataTypeName); }
        }
        Type IReportDataV2.DataType
        {
            get
            {
                if (!string.IsNullOrEmpty(DataTypeName))
                {
                    ITypeInfo typeInfo = XafTypesInfo.Instance.FindTypeInfo(DataTypeName);
                    if (typeInfo != null)
                    {
                        return typeInfo.Type;
                    }
                }
                return null;
            }
        }
        [VisibleInListView(false)]
        public bool IsInplaceReport
        {
            get { return isInplaceReport; }
            set { SetPropertyValue(ReportsModuleV2.IsInplaceReportMemberName, ref isInplaceReport, value); }
        }
        [Browsable(false)]
        [ValueConverter(typeof(TypeToStringConverter))]
        [Size(512)]
        public Type PredefinedReportType
        {
            get { return predefinedReportType; }
            set { SetPropertyValue(ReportsModuleV2.PredefinedReportTypeMemberName, ref predefinedReportType, value); }
        }
        void IReportDataV2Writable.SetContent(byte[] content)
        {
            Content = content;
        }
        void IReportDataV2Writable.SetPredefinedReportType(Type reportType)
        {
            if (reportType != null)
            {
                Guard.TypeArgumentIs(typeof(XtraReport), reportType, "reportType");
            }
            PredefinedReportType = reportType;
        }
        void IReportDataV2Writable.SetParametersObjectType(Type parametersObjectType)
        {
            if (parametersObjectType != null)
            {
                Guard.TypeArgumentIs(typeof(ReportParametersObjectBase), parametersObjectType, "parametersObjectType");
            }
            ParametersObjectTypeName = parametersObjectType != null ? parametersObjectType.FullName : string.Empty;
        }
        void IReportDataV2Writable.SetDataType(Type newDataType)
        {
            dataTypeName = newDataType != null ? newDataType.FullName : string.Empty;
        }
        void IReportDataV2Writable.SetDisplayName(string displayName)
        {
            DisplayName = displayName;
        }
        [VisibleInListView(false)]
        [VisibleInDetailView(false)]
        [NonPersistent]
        public bool IsPredefined
        {
            get { return PredefinedReportType != null; }
        }

    }
}